{"ast":null,"code":"var _jsxFileName = \"/Users/ford/Desktop/marketapp/ui/src/components/Brands/Items.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { InputGroup, FormControl, Form } from 'react-bootstrap';\nimport { getCompanies } from '../../business/api';\nimport CompanyAction from '../../actions/company';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Items = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const localization = useSelector(state => state.localization);\n  const company = useSelector(state => state.company);\n  const storeProductsData = useSelector(state => state.products.data);\n  useEffect(() => {\n    if (storeProductsData !== null) {\n      getCompanies().then(resp => {\n        let companies = {};\n        resp.map(c => companies[c.slug] = {\n          text: c.name,\n          checked: false,\n          display: true,\n          count: storeProductsData.filter(d => d.manufacturer === c.slug).length\n        });\n        dispatch(CompanyAction.setCompanies(companies));\n      });\n    }\n  }, [storeProductsData]);\n\n  const toggleItemCheckedStatus = (key, checked) => {\n    dispatch(CompanyAction.setCompanyCheckedStatus(key, checked));\n  };\n\n  const toggleAllCheckedStatus = checked => {\n    if (checked) {\n      dispatch(CompanyAction.setCompanyAllCheckedStatus(checked));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'brandItems',\n    children: Object.keys(company.data).map((key, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sortItem\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: (company.filter === null || company.filter === '') && index === 0 ? /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"checkbox\",\n          label: localization.all,\n          checked: company.allChecked,\n          onChange: () => toggleAllCheckedStatus(!company.allChecked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 29\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'mt10',\n        children: company.data[key].display ? /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"checkbox\",\n          label: company.data[key].text + ' (' + company.data[key].count + ')',\n          checked: company.data[key].checked,\n          onChange: () => toggleItemCheckedStatus(key, !company.data[key].checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)]\n    }, key, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Items, \"U7nn9EgCHuRzAmPqKUJgoyPHb5o=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = Items;\nexport default Items;\n\nvar _c;\n\n$RefreshReg$(_c, \"Items\");","map":{"version":3,"sources":["/Users/ford/Desktop/marketapp/ui/src/components/Brands/Items.js"],"names":["React","useEffect","useState","useSelector","useDispatch","InputGroup","FormControl","Form","getCompanies","CompanyAction","Items","dispatch","localization","state","company","storeProductsData","products","data","then","resp","companies","map","c","slug","text","name","checked","display","count","filter","d","manufacturer","length","setCompanies","toggleItemCheckedStatus","key","setCompanyCheckedStatus","toggleAllCheckedStatus","setCompanyAllCheckedStatus","Object","keys","index","all","allChecked"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { InputGroup, FormControl, Form } from 'react-bootstrap'\nimport { getCompanies } from '../../business/api'\nimport CompanyAction from '../../actions/company'\n\nconst Items = () => {\n    const dispatch = useDispatch()\n    const localization = useSelector(state => state.localization)\n    const company = useSelector(state => state.company)\n    const storeProductsData = useSelector(state => state.products.data)\n\n    useEffect(() => {\n        if(storeProductsData !== null){\n            getCompanies().then((resp)=>{\n                let companies = {}\n                resp.map((c)=>(\n                    companies[c.slug] = { text: c.name, checked: false, display: true, count: storeProductsData.filter((d)=>(d.manufacturer === c.slug)).length }\n                ))\n                dispatch(CompanyAction.setCompanies(companies))\n            })\n        }\n    }, [storeProductsData])\n\n    const toggleItemCheckedStatus = (key, checked) => {\n        dispatch(CompanyAction.setCompanyCheckedStatus(key, checked))\n    }\n\n    const toggleAllCheckedStatus = (checked) => {\n        if(checked){\n            dispatch(CompanyAction.setCompanyAllCheckedStatus(checked))\n        }\n    }\n\n    return(\n        <div className={'brandItems'}>\n            { Object.keys(company.data).map((key, index)=>(\n                <div className='sortItem' key={key}>\n                    <div>\n                        { ((company.filter === null || company.filter === '') && index === 0) ? (\n                            <Form.Check\n                                type='checkbox' \n                                label={localization.all}\n                                checked={company.allChecked}\n                                onChange={()=>toggleAllCheckedStatus(!company.allChecked)}\n                            ></Form.Check>\n                        ) : null }\n                    </div>  \n                    <div className={'mt10'}>\n                        { company.data[key].display ? (\n                            <Form.Check\n                                type='checkbox' \n                                label={company.data[key].text + ' (' + company.data[key].count + ')'} \n                                checked={company.data[key].checked}\n                                onChange={()=>toggleItemCheckedStatus(key, !company.data[key].checked)}\n                            ></Form.Check>\n                        ) : null }\n                    </div>\n                </div>\n            )) }\n        </div>\n    )\n}\n\nexport default Items"]},"metadata":{},"sourceType":"module"}